## All API urls

Read the code (`lib/Play/Route/*.pm`) or try them in the browser for the response format. Hint: it's usually JSON.

GET /auth/twitter               # go to twitter, obtain login, set 'twitter_user' session and return to /#register
GET /api/current_user           # get current user; 'registered=1' flag means the user is fully registered; otherwise json still can contain some info (e.g. twitter)
POST /api/register              # register the new user login, associate it with the current twitter user, save to db
GET /api/fakeuser/{login}       # fake analog of /register; dev mode only; 'notwitter' cgi param disables fake twitter account generation

GET /api/current_user/settings  # get current user's settings
PUT /api/current_user/settings  # update current user's settings
POST /api/current_user/settings # same as PUT - both rewrite settings completely

GET /api/user/{login}           # get another user
GET /api/user                   # get the list of all users

POST /api/quest                 # add a new quest for current user
PUT /api/quest/{id}             # update quest
DELETE /api/quest/{id}          # delete quest (actually, set its status to "deleted"; it won't be shown in /api/quests, but will still be fetchable by its id)
GET /api/quest                  # get all quests
GET /api/quest?user={login}     # get all quests of a given user
GET /api/quest?status={status}  # get all quests with a given status
GET /api/quest/{id}             # get one quest

POST /api/quest/{quest_id}/comment                  # add a new comment
GET /api/quest/{quest_id}/comment                   # get all quest comments
GET /api/quest/{quest_id}/comment/{comment_id}      # get a single comment

POST /api/quest/{id}/like       # like a quest
POST /api/quest/{id}/unlike     # unlike a quest

GET /api/event                  # get last 100 events

GET /api/dev/session/{name}     # get session value

## Registration

This is how registration is implemented:
1. JS redirects to /auth/twitter
2. /auth/twitter redirects to twitter.com
3. twitter.com redirects back to /auth/twitter
4. /auth/twitter, now with the correct twitter login in user's session, redirects to /#register
5. JS checks whether the user has both twitter login and service login (using /api/user); if there's no service login, it shows the registration form
6. User enters his new service login in the registration form, JS calls /api/register, and now we're fully registered.

/api/current_user is the key for frontend to check the current authentification status.

## Objects

User:
{
    _id: ...,
    login: 'blah',
    points: 123,
    twitter: {
        screen_name: 'blah'
    }
}

Quest:
{
    _id: ...,
    status: 'open',
    user: 'blah',
    name: 'quest title',
    type: 'bug'     // or 'blog', or 'feature'
    likes: [
        'foo-user',
        'bar-user'
    ]
}

Comment:
{
    _id: ...,
    body: 'comment body',
    quest_id: ...,
    author: 'foo-user'
}
